/*
 * This file is generated by jOOQ.
 */
package io.tntra.springBootcamp.tables.daos;


import io.tntra.springBootcamp.tables.Books;
import io.tntra.springBootcamp.tables.records.BooksRecord;

import java.util.List;
import java.util.Optional;

import javax.annotation.processing.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.16.7",
        "catalog version:_20220912",
        "schema version:flyway_test_20220912"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BooksDao extends DAOImpl<BooksRecord, io.tntra.springBootcamp.tables.pojos.Books, Integer> {

    /**
     * Create a new BooksDao without any configuration
     */
    public BooksDao() {
        super(Books.BOOKS, io.tntra.springBootcamp.tables.pojos.Books.class);
    }

    /**
     * Create a new BooksDao with an attached configuration
     */
    public BooksDao(Configuration configuration) {
        super(Books.BOOKS, io.tntra.springBootcamp.tables.pojos.Books.class, configuration);
    }

    @Override
    public Integer getId(io.tntra.springBootcamp.tables.pojos.Books object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<io.tntra.springBootcamp.tables.pojos.Books> fetchRangeOfId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Books.BOOKS.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<io.tntra.springBootcamp.tables.pojos.Books> fetchById(Integer... values) {
        return fetch(Books.BOOKS.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public io.tntra.springBootcamp.tables.pojos.Books fetchOneById(Integer value) {
        return fetchOne(Books.BOOKS.ID, value);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public Optional<io.tntra.springBootcamp.tables.pojos.Books> fetchOptionalById(Integer value) {
        return fetchOptional(Books.BOOKS.ID, value);
    }

    /**
     * Fetch records that have <code>first_name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<io.tntra.springBootcamp.tables.pojos.Books> fetchRangeOfFirstName(String lowerInclusive, String upperInclusive) {
        return fetchRange(Books.BOOKS.FIRST_NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>first_name IN (values)</code>
     */
    public List<io.tntra.springBootcamp.tables.pojos.Books> fetchByFirstName(String... values) {
        return fetch(Books.BOOKS.FIRST_NAME, values);
    }

    /**
     * Fetch records that have <code>last_name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<io.tntra.springBootcamp.tables.pojos.Books> fetchRangeOfLastName(String lowerInclusive, String upperInclusive) {
        return fetchRange(Books.BOOKS.LAST_NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>last_name IN (values)</code>
     */
    public List<io.tntra.springBootcamp.tables.pojos.Books> fetchByLastName(String... values) {
        return fetch(Books.BOOKS.LAST_NAME, values);
    }

    /**
     * Fetch records that have <code>age BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<io.tntra.springBootcamp.tables.pojos.Books> fetchRangeOfAge(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Books.BOOKS.AGE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>age IN (values)</code>
     */
    public List<io.tntra.springBootcamp.tables.pojos.Books> fetchByAge(Integer... values) {
        return fetch(Books.BOOKS.AGE, values);
    }

    /**
     * Fetch records that have <code>email BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<io.tntra.springBootcamp.tables.pojos.Books> fetchRangeOfEmail(String lowerInclusive, String upperInclusive) {
        return fetchRange(Books.BOOKS.EMAIL, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>email IN (values)</code>
     */
    public List<io.tntra.springBootcamp.tables.pojos.Books> fetchByEmail(String... values) {
        return fetch(Books.BOOKS.EMAIL, values);
    }
}
