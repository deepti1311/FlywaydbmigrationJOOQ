/*
 * This file is generated by jOOQ.
 */
package io.tntra.springBootcamp.tables.records;


import io.tntra.springBootcamp.tables.Books;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import jakarta.persistence.Table;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record5;
import org.jooq.Row5;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.16.7",
        "catalog version:_20220912",
        "schema version:flyway_test_20220912"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Entity
@Table(
    name = "books",
    schema = "flyway_test"
)
public class BooksRecord extends UpdatableRecordImpl<BooksRecord> implements Record5<Integer, String, String, Integer, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>flyway_test.books.id</code>.
     */
    public BooksRecord setId(Integer value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>flyway_test.books.id</code>.
     */
    @Id
    @Column(name = "id", nullable = false, precision = 32)
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>flyway_test.books.first_name</code>.
     */
    public BooksRecord setFirstName(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>flyway_test.books.first_name</code>.
     */
    @Column(name = "first_name", length = 50)
    public String getFirstName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>flyway_test.books.last_name</code>.
     */
    public BooksRecord setLastName(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>flyway_test.books.last_name</code>.
     */
    @Column(name = "last_name", nullable = false, length = 50)
    public String getLastName() {
        return (String) get(2);
    }

    /**
     * Setter for <code>flyway_test.books.age</code>.
     */
    public BooksRecord setAge(Integer value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>flyway_test.books.age</code>.
     */
    @Column(name = "age", precision = 32)
    public Integer getAge() {
        return (Integer) get(3);
    }

    /**
     * Setter for <code>flyway_test.books.email</code>.
     */
    public BooksRecord setEmail(String value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>flyway_test.books.email</code>.
     */
    @Column(name = "email", length = 50)
    public String getEmail() {
        return (String) get(4);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record5 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, String, String, Integer, String> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    @Override
    public Row5<Integer, String, String, Integer, String> valuesRow() {
        return (Row5) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return Books.BOOKS.ID;
    }

    @Override
    public Field<String> field2() {
        return Books.BOOKS.FIRST_NAME;
    }

    @Override
    public Field<String> field3() {
        return Books.BOOKS.LAST_NAME;
    }

    @Override
    public Field<Integer> field4() {
        return Books.BOOKS.AGE;
    }

    @Override
    public Field<String> field5() {
        return Books.BOOKS.EMAIL;
    }

    @Override
    public Integer component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getFirstName();
    }

    @Override
    public String component3() {
        return getLastName();
    }

    @Override
    public Integer component4() {
        return getAge();
    }

    @Override
    public String component5() {
        return getEmail();
    }

    @Override
    public Integer value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getFirstName();
    }

    @Override
    public String value3() {
        return getLastName();
    }

    @Override
    public Integer value4() {
        return getAge();
    }

    @Override
    public String value5() {
        return getEmail();
    }

    @Override
    public BooksRecord value1(Integer value) {
        setId(value);
        return this;
    }

    @Override
    public BooksRecord value2(String value) {
        setFirstName(value);
        return this;
    }

    @Override
    public BooksRecord value3(String value) {
        setLastName(value);
        return this;
    }

    @Override
    public BooksRecord value4(Integer value) {
        setAge(value);
        return this;
    }

    @Override
    public BooksRecord value5(String value) {
        setEmail(value);
        return this;
    }

    @Override
    public BooksRecord values(Integer value1, String value2, String value3, Integer value4, String value5) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached BooksRecord
     */
    public BooksRecord() {
        super(Books.BOOKS);
    }

    /**
     * Create a detached, initialised BooksRecord
     */
    public BooksRecord(Integer id, String firstName, String lastName, Integer age, String email) {
        super(Books.BOOKS);

        setId(id);
        setFirstName(firstName);
        setLastName(lastName);
        setAge(age);
        setEmail(email);
    }

    /**
     * Create a detached, initialised BooksRecord
     */
    public BooksRecord(io.tntra.springBootcamp.tables.pojos.Books value) {
        super(Books.BOOKS);

        if (value != null) {
            setId(value.getId());
            setFirstName(value.getFirstName());
            setLastName(value.getLastName());
            setAge(value.getAge());
            setEmail(value.getEmail());
        }
    }
}
